// src/schemas/users.schema.js
import { z } from "zod";

/**
 * Reglas de validaciÃ³n para Usuarios.
 * - id: string no vacÃ­o (lo usamos en params para /users/:id)
 * - email: obligatorio en create y replace, formato email vÃ¡lido
 * - name: opcional; si viene, string no vacÃ­o y mÃ¡x 120 chars
 */
const id = z.string().min(1, "id requerido ðŸ˜‰");

const email = z
  .string({
    required_error: "email es obligatorio ðŸ‘Œ",
    invalid_type_error: "email debe ser string ðŸ˜Ž",
  })
  .email("email no vÃ¡lido ðŸ˜’");

const name = z
  .string({
    invalid_type_error: "name debe ser string ðŸ‘Œ",
  })
  .min(1, "name no puede ser vacÃ­o ðŸ˜Ž")
  .max(30, "name demasiado largo ðŸ˜’")
  .optional();

export const UsersSchemas = {
  // GET /users â†’ si luego aÃ±ades paginaciÃ³n o filtros, aquÃ­ validas req.query
  list: {
    // DefiniciÃ³n del esquema para la query de "listar usuarios"
    query: z.object({
      // `page`: nÃºmero entero, mÃ­nimo 1, por defecto 1
      page: z.coerce.number().int().min(1).default(1),
      // `limit`: nÃºmero entero, mÃ­nimo 1, mÃ¡ximo 50, por defecto 20
      limit: z.coerce.number().int().min(1).max(50).default(20),
      // `search`: string opcional, mÃ­nimo 1 caracter, mÃ¡ximo 120, sin espacios sobrantes
      search: z.string().trim().min(1).max(120).optional()
    }),
  },

  // GET /users/:id
  getById: {
    params: z.object({ id }),
  },

  // POST /users
  create: {
    body: z.object({
      email,
      name: name.optional(),
    }),
  },

  // PUT /users/:id â†’ reemplaza datos completos (aquÃ­ pedimos email y name opcional)
  replace: {
    params: z.object({ id }),
    body: z.object({
      email,
      name: name.optional(),
    }),
  },

  // PATCH /users/:id â†’ actualizaciÃ³n parcial (al menos un campo)
  update: {
    params: z.object({ id }),
    body: z
      .object({
        email: email.optional(),
        name: name.optional(),
      })
      .refine(
        (data) => Object.keys(data).length > 0,
        { message: "Debes enviar al menos un campo: email o name" }
      ),
  },

  // DELETE /users/:id
  remove: {
    params: z.object({ id }),
  },
};
